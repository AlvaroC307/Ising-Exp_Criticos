from concurrent.futures import *
import csv
import time
from tqdm import tqdm

from Medidas import *
from Montecarlo import *
from Representacion import *
from Red import *


def main():

    start=time.time()   # Comienza a contar el tiempo de ejecución

    #---------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------
    #--------------------------------------------INPUT--------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------

    csv_Input = open('./Input/Input.csv', 'r') # Abrir el fichero donde están los Inputs del programa
    Reader_Input = csv.reader(csv_Input) # Definir un objeto que lee el fichero

    list_Input = [] # Vector donde guardaremos los inputs
    for row in Reader_Input:
        list_Input.append(row[1]) # Añadir cada segundo elemento de cada fila del csv en una lista
    csv_Input.close() # Cerrar el fichero

    N = eval(list_Input[0]) # Número de puntos de la red
    N_mover=eval(list_Input[1])*N**2 # Número de veces que movemos antes de medir
    N_med=eval(list_Input[2])   # Número de veces que medimos
    N_calentar=eval(list_Input[3])*N**2  # Número de movimientos de calentamiento
    B = eval(list_Input[4]) # Campo externo (B=\mu H)
    beta = eval(list_Input[5]) # Inversa de la temperatura, hemos tomado k=1
    pintar_intermedios = eval(list_Input[6]) # Variable que nos dice si pintar los pasos intermedios o no

    #---------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------
    #---------------------------------------VECTOR DE EXPONENCIALES-------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------

    vec_exp = Vector_Exponenciales(beta, B)

    #---------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------
    #---------------------------------APERTURA DE ARCHIVOS DE ESCRITURA Y ESCRIBIR TÍTULOS--------------------------------
    #---------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------

    # Abrimos los archivos donde guardaremos las medidas
    med_file=open('./Data/Medidas.csv', "w", newline="")
    med_csv=csv.writer(med_file, delimiter = ",")
    Titles = ["M", "|M|", "M^2", "E", "E^2"]
    med_csv.writerow(Titles)

    #---------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------RED INICIAL-------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------

    #   Creamos la red inicial y la pintamos
    red = red_random(N)
    pintar(red, N, "inicial")

    #---------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------MEDIDAS INICIALES---------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------    

    #   Hallamos la magnetización y magnetización al cuadrado inciales y las guardamos en los respectivos ficheros
    """ medida = magnetizaciones(red, N)
    M = medida[0]
    M2 = medida[1]

    #   Cerramos los archivos 
    M_csv.writerow([M])
    M2_csv.writerow([M2]) """

    #---------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------
    #--------------------------------------INICIALIZACIÓN VALORES ENERGIA-------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------

    #   Inicializamos el valor de la energía
    """ e_i = 0
    e2 = 0
    E_i = 0 """
    """ #   Caculamos la energía inicial
    E_i=E_0(red, N, B)
    E_csv.writerow([E_i]) """

    #---------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------CALENTAMIENTO-------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------

    print("Calentamiento: ")
    #     Hacemos movimientos de calentamiento
    for j in tqdm(range(N_calentar)):
        Metropolis(red, N, vec_exp)

    #---------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------
    #--------------------------------------------ALGORITMO METRÓPOLIS-----------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------

    print("Montecarlo: ")
    #   Ejecutamos el algortimo de metropolis. Movemos N_mover entre cada medida. Medimo N_med veces
    for i in tqdm(range(N_med)):
        for j in range(N_mover):
            Metropolis(red, N, vec_exp)

        # Cada vez que midamos pintamos el estado de la red, si así lo hemos decidido antes
        if pintar_intermedios == True:
            nombre="Pasos_intermedios"
            pintar(red, N, nombre)

    #---------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------
    #----------------------------------------------ESCRIBIR MEDIDAS-------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------

        #   Ejecutamos la función de magnetizaciones, que nos da un valor de la magnetización o otro de la magnetización al cuadrado.
        #   Guardamos las salidas y luego las escribimos en un archivo
        medida_m = magnetizaciones(red, N)    
        medida_e = energias(red, N, B)
        med_csv.writerow(medida_m + medida_e)
     
 
        # print("Progreso", (100*i)/N_med, "%", end = "\r")

    #   Cerramos los archivos en lo que hemos escrito
    med_file.close()

    #---------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------
    #--------------------------------PINTAR RED FINAL, REPRESENTACIONES, PROMEDIOS Y MAGNETO------------------------------
    #---------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------

    #   Pintamos la red al final del proceso
    pintar(red, N, "final")
    #   Generamos los gráficos 
    Representacion()
    #   Llamamos a la función que calcula los promedios de las cantidades necesarias
    promedios(N, beta)

    print("------------------------------------------------------------------")
    print("Duración de la simulación: ", time.time()-start, "segundos")
    print("------------------------------------------------------------------")
    print("MAGNETO")
    print("""          ⣀⣤⣴⣶⣶⣶⣶⣦⣤⣀⠀⠀⠀⠀⠀⠀
    ⠀⠀⠀⢀⣴⡿⢛⣿⣿⣿⣿⣿⣿⣿⣿⡛⢿⣦⡀⠀⠀⠀
    ⠀⠀⣰⣿⡟⠀⠀⣿⣿⠿⠛⠛⠿⣿⣿⠀⠀⢻⣿⣆⠀⠀
    ⠀⣰⣿⣿⣿⡀⠀⠹⣿⠀⠀⠀⠀⣿⠏⠀⢀⣿⣿⣿⣧⠀
    ⢠⣿⣿⣿⣿⣿⣦⣤⣘⣇⠀⠀⣸⣁⣤⣴⣿⣿⣿⣿⣿⡄
    ⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇
    ⢸⣿⣿⣿⣿⠟⠛⠛⠻⣿⣿⣿⣿⠟⡛⠛⠻⣿⣿⣿⣿⡇
    ⢸⣿⣿⣿⣇⠀⠚⠛⠓⠈⠛⠛⠁⠚⠛⠓⠀⣹⣿⣿⣿⡇
    ⢸⣿⣿⣿⣿⣷⣤⣤⣄⠀⠀⠀⠀⣠⣤⣤⣾⣿⣿⣿⣿⡇
    ⢸⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⡇
    ⢸⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠿⠿⣿⣿⣿⣿⣿⣿⣿⣿⡇
    ⢸⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⡇
    ⢸⣿⣿⣿⣿⣿⣿⣿⣿⣦⣤⣤⣴⣿⣿⣿⣿⣿⣿⣿⣿⡇
    ⠘⠻⠿⣿⣿⣿⣿⣿⣿⠛⠛⠛⠛⣿⣿⣿⣿⣿⣿⠿⠟⠃
    ⠀⠀⠀⠀⠀⠉⠉⠉⠁⠀⠀⠀⠀⠉⠋⠉⠉⠀⠀⠀⠀⠀""")
  

if __name__ == '__main__':
    main()
